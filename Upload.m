global dirSrc dirModel modelName spiClock spiBitOrder spiMode

%Set parameter by user
modelName = 'model'; %name of simulink model
spiClock = 2000000; %SPI clock speed
spiBitOrder = 1; %SPI BitOrder
spiMode = 0x00; %SPI MODE

%Set 'src/' directory of PlatformIO
dirSrc = 'src/';

%Set embedded coder
cs = getActiveConfigSet(modelName);
switchTarget(cs,'ert.tlc',[]);

%Generate C-code
slbuild(modelName);

%zip C-code of model with arduino library
load(append(modelName, '_ert_rtw/buildInfo.mat'));
packNGo(buildInfo, 'fileName', modelName);

%Unzip model
dirModel = append(modelName, 'Code/');

if(exist(dirModel))
    rmdir(dirModel, 's');
end

unzip(append(modelName, ".zip"), dirModel);

%Delete files in 'src/' directory
delete('src/*');

%Copy main file to 'src' directory of PlatformIO
copyfile('materials/main_base.cpp', dirSrc, 'f');
movefile('src/main_base.cpp', 'src/main.cpp', 'f');

%Copy arduino library to 'src' directory of PlatformIO
libraryCP();

%Generate initialize fcn for 'src/main.cpp'
generateInitFcn();

%Upload for Teensy.
system('pio run --target=upload');

function libraryCP
    
    %Set direcotries 
    global dirSrc dirModel modelName spiClock spiBitOrder spiMode

    %Copy generated files to 'src' directory of PlatformIO
    copyfile(append(dirModel, '*.c'), dirSrc, 'f');
    copyfile(append(dirModel, '*.cpp'), dirSrc, 'f');
    copyfile(append(dirModel, '*.h'), dirSrc, 'f');

    %Convert model file from C-file to C++-file
    movefile(append(dirSrc, append(modelName, '.c')), append(dirSrc, append(modelName,'.cpp')), 'f');
    
    %Delete for Teensy
    delete('src/arduinoARMScheduler.cpp');
    delete('src/MW_ArduinoHWInit.cpp');
    delete('src/arm_m3_cortex_handler.c');
    delete('src/m3m4m4f_multitasking.c');

    %For PWM
    lines = readlines("materials/pwmInfo.txt");
    system('chmod 766 src/MW_PWMDriver.c');
    writelines(lines, 'src/MW_PWMDriver.c', WriteMode='append');
    
    %Set SPI 
    if(exist('src/MW_SPIwriteRead.cpp'))
        system('chmod 766 src/MW_SPIwriteRead.cpp');
        system(append(append('echo -e "int _RTT_SPI_CLOCK_ = ', string(spiClock)), ';" > tmp.cpp'));
        system(append(append('echo -e "int _RTT_SPI_BITORDER_ = ', string(spiBitOrder)), ';" >> tmp.cpp'));
        system(append(append('echo -e "int _RTT_SPI_MODE_ = ', string(spiMode)), ';" >> tmp.cpp'));
        system(append('cat ', append(dirSrc, 'MW_SPIwriteRead.cpp >> tmp.cpp')));
        system(append('mv -f tmp.cpp ', append(dirSrc, 'MW_SPIwriteRead.cpp')));
    end
end

function generateInitFcn()
    %Set direcotries 
    global dirSrc dirModel modelName

    %Write code
    writelines('//Initialize fcn generated by m-file', 'src/main.cpp', WriteMode='append');
    writelines('void initLib(void){', 'src/main.cpp', WriteMode='append');
    lines = append(modelName, '_initialize(); //initialize fcn created by simulink');
    writelines(lines, 'src/main.cpp', WriteMode='append');

    %Write SPI init code
    if(exist('src/MW_SPIwriteRead.cpp'))
        lines = 'MW_SPIwriteReadSetup(); //For SPI';
        writelines(lines, 'src/main.cpp', WriteMode='append');
    end

    lines = "}";
    writelines(lines, 'src/main.cpp', WriteMode='append');
end